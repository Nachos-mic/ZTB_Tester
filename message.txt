import pytest
import psycopg2
import random
import string
import time
import inspect, sys

@pytest.fixture(scope="module")
def conn():
    c = psycopg2.connect(
        host="localhost",
        user="postgres",
        password="my-secret-pw",
        database="ZTB_DATABASE"
    )
    c.autocommit = False
    yield c
    c.close()

def random_suffix(n=6):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=n))

def random_isbn():
    return ''.join(random.choices(string.digits, k=10))

def random_code():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))

# -----------------------
# POST tests
# -----------------------

def test_insert_book_genre(conn):
    cur = conn.cursor()
    genre_name = f"Genre-{random_suffix()}"
    pop = random.randint(1, 100)
    cur.execute(
        "INSERT INTO Book_Genres (genre_name,popularity) VALUES (%s,%s) RETURNING id",
        (genre_name, pop)
    )
    gid = cur.fetchone()[0]
    conn.commit()
    assert gid > 0
    cur.execute("SELECT genre_name,popularity FROM Book_Genres WHERE id=%s", (gid,))
    assert cur.fetchone() == (genre_name, pop)

def test_insert_user(conn):
    cur = conn.cursor()
    loc = f"City-{random_suffix()}"
    age = random.randint(18, 80)
    cur.execute(
        "INSERT INTO Users (location,age) VALUES (%s,%s) RETURNING users_id",
        (loc, age)
    )
    uid = cur.fetchone()[0]
    conn.commit()
    assert uid > 0
    cur.execute("SELECT location,age FROM Users WHERE users_id=%s", (uid,))
    assert cur.fetchone() == (loc, age)

def test_insert_publisher_and_author(conn):
    cur = conn.cursor()
    pub_id = random_code()
    auth_id = random_code()
    name = f"Pub-{random_suffix()}"
    cur.execute(
        "INSERT INTO Publishers (publisher_id, name,address,country,email,phone) VALUES (%s,%s,%s,%s,%s,%s)",
        (pub_id, name, "Addr", "PL", f"{name}@mail.com", "123456")
    )
    cur.execute(
        "INSERT INTO Authors (author_id, author_name,country_of_origin,birth_date) VALUES (%s,%s,%s,%s)",
        (auth_id, f"Auth-{random_suffix()}", "US", "1970-01-01")
    )
    conn.commit()
    cur.execute("SELECT name FROM Publishers WHERE publisher_id=%s", (pub_id,))
    assert cur.fetchone() is not None
    cur.execute("SELECT author_name FROM Authors WHERE author_id=%s", (auth_id,))
    assert cur.fetchone() is not None

def test_insert_order_and_return(conn):
    cur = conn.cursor()
    pub_id = random_code()
    auth_id = random_code()
    isbn = random_isbn()
    cur.execute("INSERT INTO Publishers (publisher_id, name,address,country,email,phone) VALUES (%s,%s,%s,%s,%s,%s)",
                (pub_id, "P", "A", "PL", "p@mail", "000000"))
    cur.execute("INSERT INTO Authors (author_id, author_name,country_of_origin,birth_date) VALUES (%s,%s,%s,%s)",
                (auth_id, "A", "US", "1970-01-01"))
    cur.execute("INSERT INTO Book_Genres (genre_name,popularity) VALUES (%s,%s) RETURNING id", ("G", 1))
    gid = cur.fetchone()[0]
    cur.execute(
        "INSERT INTO Books (isbn,book_name,year_of_release,genre_id,publisher_id,author_id) VALUES (%s,%s,%s,%s,%s,%s)",
        (isbn, "T", 2025, gid, pub_id, auth_id)
    )
    cur.execute("INSERT INTO Users (location,age) VALUES (%s,%s) RETURNING users_id", ("L", 30))
    uid = cur.fetchone()[0]
    cur.execute(
        "INSERT INTO Orders (isbn,user_id,order_date,order_cost) VALUES (%s,%s,CURRENT_DATE,%s) RETURNING order_id",
        (isbn, uid, 99.9)
    )
    oid = cur.fetchone()[0]
    cur.execute(
        "INSERT INTO Returns (order_id,return_date,reason_description) VALUES (%s,CURRENT_DATE,%s) RETURNING return_id",
        (oid, "no reason")
    )
    rid = cur.fetchone()[0]
    conn.commit()
    assert oid > 0 and rid > 0

def test_insert_book_rating_group_by(conn):
    cur = conn.cursor()
    cur.execute("INSERT INTO Users (location,age) VALUES (%s,%s) RETURNING users_id", ("X", 40))
    uid = cur.fetchone()[0]
    pub_id = random_code()
    auth_id = random_code()
    isbn = random_isbn()
    cur.execute("INSERT INTO Publishers (publisher_id, name,address,country,email,phone) VALUES (%s,%s,%s,%s,%s,%s)",
                (pub_id, "P", "A", "PL", "p@mail", "000000"))
    cur.execute("INSERT INTO Authors (author_id, author_name,country_of_origin,birth_date) VALUES (%s,%s,%s,%s)",
                (auth_id, "A", "US", "1970-01-01"))
    cur.execute("INSERT INTO Book_Genres (genre_name,popularity) VALUES (%s,%s) RETURNING id", ("G", 1))
    gid = cur.fetchone()[0]
    cur.execute(
        "INSERT INTO Books (isbn,book_name,year_of_release,genre_id,publisher_id,author_id) VALUES (%s,%s,%s,%s,%s,%s)",
        (isbn, "BR", 2024, gid, pub_id, auth_id)
    )
    for rating in [3, 4, 5]:
        cur.execute("INSERT INTO Book_Ratings (user_id,isbn,book_rating) VALUES (%s,%s,%s)", (uid, isbn, rating))
    conn.commit()
    cur.execute("SELECT isbn, COUNT(*) FROM Book_Ratings GROUP BY isbn HAVING isbn=%s", (isbn,))
    row = cur.fetchone()
    assert row[1] == 3

def test_insert_book_rating_join(conn):
    cur = conn.cursor()
    cur.execute("INSERT INTO Users (location,age) VALUES (%s,%s) RETURNING users_id", ("Y", 50))
    uid = cur.fetchone()[0]
    pub_id = random_code()
    auth_id = random_code()
    isbn = random_isbn()
    cur.execute("INSERT INTO Publishers (publisher_id, name,address,country,email,phone) VALUES (%s,%s,%s,%s,%s,%s)",
                (pub_id, "P", "A", "PL", "p@mail", "000000"))
    cur.execute("INSERT INTO Authors (author_id, author_name,country_of_origin,birth_date) VALUES (%s,%s,%s,%s)",
                (auth_id, "A", "US", "1970-01-01"))
    cur.execute("INSERT INTO Book_Genres (genre_name,popularity) VALUES (%s,%s) RETURNING id", ("G", 1))
    gid = cur.fetchone()[0]
    cur.execute(
        "INSERT INTO Books (isbn,book_name,year_of_release,genre_id,publisher_id,author_id) VALUES (%s,%s,%s,%s,%s,%s)",
        (isbn, "BRJ", 2024, gid, pub_id, auth_id)
    )
    rating = random.randint(1, 5)
    cur.execute("INSERT INTO Book_Ratings (user_id,isbn,book_rating) VALUES (%s,%s,%s)", (uid, isbn, rating))
    conn.commit()
    cur.execute("""
        SELECT br.book_rating, b.book_name
        FROM Book_Ratings br
        JOIN Books b ON br.isbn = b.isbn
        WHERE br.user_id=%s AND br.isbn=%s
    """, (uid, isbn))
    row = cur.fetchone()
    assert row[0] == rating and row[1] == "BRJ"

# -----------------------
# GET tests
# -----------------------

def test_get_order_with_book_and_author(conn):
    cur = conn.cursor()
    pub_id = random_code()
    auth_id = random_code()
    cur.execute("INSERT INTO Authors (author_id, author_name,country_of_origin,birth_date) VALUES (%s,%s,%s,%s)",
                (auth_id, "GA", "FR", "1985-05-05"))
    cur.execute("INSERT INTO Publishers (publisher_id, name,address,country,email,phone) VALUES (%s,%s,%s,%s,%s,%s)",
                (pub_id, "PB", "A", "DE", "pb@mail", "000000"))
    cur.execute("INSERT INTO Book_Genres (genre_name,popularity) VALUES (%s,%s) RETURNING id", ("G2", 15))
    gid = cur.fetchone()[0]
    isbn = random_isbn()
    cur.execute(
        "INSERT INTO Books (isbn,book_name,year_of_release,genre_id,publisher_id,author_id) VALUES (%s,%s,%s,%s,%s,%s)",
        (isbn, "Name", 2023, gid, pub_id, auth_id)
    )
    cur.execute("INSERT INTO Users (location,age) VALUES (%s,%s) RETURNING users_id", ("Loc", 22))
    uid = cur.fetchone()[0]
    cur.execute("INSERT INTO Orders (isbn,user_id,order_date,order_cost) VALUES (%s,%s,CURRENT_DATE,%s) RETURNING order_id",
                (isbn, uid, 55.5))
    oid = cur.fetchone()[0]
    conn.commit()
    cur.execute("""
        SELECT o.order_id, b.book_name, a.author_name
        FROM Orders o
        JOIN Books b ON o.isbn=b.isbn
        JOIN Authors a ON b.author_id=a.author_id
        WHERE o.order_id=%s
    """, (oid,))
    row = cur.fetchone()
    assert row == (oid, "Name", "GA")

def test_get_average_book_rating_above(conn):
    cur = conn.cursor()
    pub_id = random_code()
    auth_id = random_code()
    isbn = random_isbn()
    cur.execute("INSERT INTO Publishers (publisher_id, name,address,country,email,phone) VALUES (%s,%s,%s,%s,%s,%s)",
                (pub_id, "P", "A", "PL", "p@mail", "000000"))
    cur.execute("INSERT INTO Authors (author_id, author_name,country_of_origin,birth_date) VALUES (%s,%s,%s,%s)",
                (auth_id, "A", "US", "1970-01-01"))
    cur.execute("INSERT INTO Book_Genres (genre_name,popularity) VALUES (%s,%s) RETURNING id", ("G", 1))
    gid = cur.fetchone()[0]
    cur.execute("INSERT INTO Books (isbn,book_name,year_of_release,genre_id,publisher_id,author_id) VALUES (%s,%s,%s,%s,%s,%s)",
                (isbn, "Avg", 2022, gid, pub_id, auth_id))
    vals = []
    for r in [3, 5, 4]:
        cur.execute("INSERT INTO Users (location,age) VALUES (%s,%s) RETURNING users_id", ("U", 30))
        uid = cur.fetchone()[0]
        cur.execute("INSERT INTO Book_Ratings (user_id,isbn,book_rating) VALUES (%s,%s,%s)", (uid, isbn, r))
        vals.append(r)
    conn.commit()
    avg = sum(vals) / len(vals)
    cur.execute("""
        SELECT isbn FROM Books
        WHERE isbn IN (
            SELECT isbn FROM Book_Ratings GROUP BY isbn HAVING AVG(book_rating) > %s
        )
    """, (3.5,))
    fetched = [r[0] for r in cur.fetchall()]
    assert isbn in fetched

def test_get_genre_book_counts_group_by(conn):
    cur = conn.cursor()
    publisher_id = get_any(cur, "Publishers", "publisher_id")
    author_id = get_any(cur, "Authors", "author_id")
    cur.execute("INSERT INTO Book_Genres (genre_name,popularity) VALUES (%s,%s) RETURNING id", ("G3", 5))
    g1 = cur.fetchone()[0]
    cur.execute("INSERT INTO Book_Genres (genre_name,popularity) VALUES (%s,%s) RETURNING id", ("G4", 8))
    g2 = cur.fetchone()[0]
    for _ in range(2):
        cur.execute("INSERT INTO Books (isbn,book_name,year_of_release,genre_id,publisher_id,author_id) "
                    "VALUES (%s,%s,%s,%s,%s,%s)",
                    (f"ISBN-{random_suffix()}", "X", 2021, g1, publisher_id, author_id))
    cur.execute("INSERT INTO Books (isbn,book_name,year_of_release,genre_id,publisher_id,author_id) "
                "VALUES (%s,%s,%s,%s,%s,%s)",
                (f"ISBN-{random_suffix()}", "Y", 2020, g2, publisher_id, author_id))
    conn.commit()
    cur.execute("""
        SELECT g.genre_name, COUNT(b.isbn) AS cnt
        FROM Book_Genres g
        LEFT JOIN Books b ON g.id=b.genre_id
        WHERE g.id IN (%s,%s)
        GROUP BY g.genre_name
    """, (g1, g2))
    res = dict(cur.fetchall())
    assert res["G3"] == 2 and res["G4"] == 1

def test_get_users_and_orders_join(conn):
    cur = conn.cursor()
    cur.execute("INSERT INTO Users (location,age) VALUES (%s,%s) RETURNING users_id", ("JoinLoc", 35))
    uid = cur.fetchone()[0]
    pub_id = random_code()
    auth_id = random_code()
    isbn = random_isbn()
    cur.execute("INSERT INTO Publishers (publisher_id, name,address,country,email,phone) VALUES (%s,%s,%s,%s,%s,%s)",
                (pub_id, "JP", "A", "PL", "jp@mail", "000000"))
    cur.execute("INSERT INTO Authors (author_id, author_name,country_of_origin,birth_date) VALUES (%s,%s,%s,%s)",
                (auth_id, "JA", "US", "1970-01-01"))
    cur.execute("INSERT INTO Book_Genres (genre_name,popularity) VALUES (%s,%s) RETURNING id", ("JG", 1))
    gid = cur.fetchone()[0]
    cur.execute(
        "INSERT INTO Books (isbn,book_name,year_of_release,genre_id,publisher_id,author_id) VALUES (%s,%s,%s,%s,%s,%s)",
        (isbn, "JoinBook", 2024, gid, pub_id, auth_id)
    )
    cur.execute("INSERT INTO Orders (isbn,user_id,order_date,order_cost) VALUES (%s,%s,CURRENT_DATE,%s)",
                (isbn, uid, 88.8))
    conn.commit()
    cur.execute("""
        SELECT u.location, o.order_cost
        FROM Users u
        JOIN Orders o ON u.users_id = o.user_id
        WHERE u.users_id = %s
    """, (uid,))
    row = cur.fetchone()
    assert row[0] == "JoinLoc" and float(row[1]) == 88.8

def get_any(cur, table, col):
    cur.execute(f"SELECT {col} FROM {table} LIMIT 1")
    row = cur.fetchone()
    if row:
        return row[0]
    raise Exception(f"No data in {table}")

# -----------------------
# PUT tests
# -----------------------

def test_update_genre_popularity(conn):
    cur = conn.cursor()
    cur.execute("INSERT INTO Book_Genres (genre_name,popularity) VALUES (%s,%s) RETURNING id", ("UG", 1))
    gid = cur.fetchone()[0]
    conn.commit()
    cur.execute("UPDATE Book_Genres SET popularity=popularity+5 WHERE id=%s", (gid,))
    conn.commit()
    cur.execute("SELECT popularity FROM Book_Genres WHERE id=%s", (gid,))
    assert cur.fetchone()[0] == 6

def test_update_user_location(conn):
    cur = conn.cursor()
    cur.execute("INSERT INTO Users (location,age) VALUES (%s,%s) RETURNING users_id", ("OldLoc", 30))
    uid = cur.fetchone()[0]
    conn.commit()
    new_loc = f"Loc-{random_suffix()}"
    cur.execute("UPDATE Users SET location=%s WHERE users_id=%s", (new_loc, uid))
    conn.commit()
    cur.execute("SELECT location FROM Users WHERE users_id=%s", (uid,))
    assert cur.fetchone()[0] == new_loc

def test_update_genre_popularity_group_by(conn):
    cur = conn.cursor()
    cur.execute("INSERT INTO Book_Genres (genre_name,popularity) VALUES (%s,%s) RETURNING id", ("UGG", 1))
    gid = cur.fetchone()[0]
    publisher_id = get_any(cur, "Publishers", "publisher_id")
    author_id = get_any(cur, "Authors", "author_id")
    for _ in range(2):
        cur.execute("INSERT INTO Books (isbn,book_name,year_of_release,genre_id,publisher_id,author_id) "
                    "VALUES (%s,%s,%s,%s,%s,%s)",
                    (f"ISBN-{random_suffix()}", "UGG-Book", 2021, gid, publisher_id, author_id))
    conn.commit()
    cur.execute("""
        UPDATE Book_Genres
        SET popularity = popularity + 10
        WHERE id IN (
            SELECT genre_id FROM Books GROUP BY genre_id HAVING COUNT(*) > 1
        )
    """)
    conn.commit()
    cur.execute("SELECT popularity FROM Book_Genres WHERE id=%s", (gid,))
    assert cur.fetchone()[0] == 11

def test_update_user_with_order_join(conn):
    cur = conn.cursor()
    cur.execute("INSERT INTO Users (location,age) VALUES (%s,%s) RETURNING users_id", ("OldJoinLoc", 28))
    uid = cur.fetchone()[0]
    pub_id = random_code()
    auth_id = random_code()
    isbn = random_isbn()
    cur.execute("INSERT INTO Publishers (publisher_id, name,address,country,email,phone) VALUES (%s,%s,%s,%s,%s,%s)",
                (pub_id, "PUJ", "A", "PL", "puj@mail", "000000"))
    cur.execute("INSERT INTO Authors (author_id, author_name,country_of_origin,birth_date) VALUES (%s,%s,%s,%s)",
                (auth_id, "AUJ", "US", "1970-01-01"))
    cur.execute("INSERT INTO Book_Genres (genre_name,popularity) VALUES (%s,%s) RETURNING id", ("GJ", 1))
    gid = cur.fetchone()[0]
    cur.execute(
        "INSERT INTO Books (isbn,book_name,year_of_release,genre_id,publisher_id,author_id) VALUES (%s,%s,%s,%s,%s,%s)",
        (isbn, "JoinBook2", 2024, gid, pub_id, auth_id)
    )
    cur.execute("INSERT INTO Orders (isbn,user_id,order_date,order_cost) VALUES (%s,%s,CURRENT_DATE,%s)",
                (isbn, uid, 77.7))
    conn.commit()
    new_loc = f"JoinLoc-{random_suffix()}"
    cur.execute("""
        UPDATE Users 
        SET location = %s
        FROM Orders o 
        WHERE Users.users_id = o.user_id AND o.user_id = %s
    """, (new_loc, uid))
    conn.commit()
    cur.execute("SELECT location FROM Users WHERE users_id=%s", (uid,))
    assert cur.fetchone()[0] == new_loc

# -----------------------
# DELETE tests
# -----------------------

def test_delete_genre_by_id(conn):
    cur = conn.cursor()
    cur.execute("INSERT INTO Book_Genres (genre_name,popularity) VALUES (%s,%s) RETURNING id", ("DG", 3))
    gid = cur.fetchone()[0]
    conn.commit()
    cur.execute("DELETE FROM Book_Genres WHERE id=%s", (gid,))
    conn.commit()
    cur.execute("SELECT COUNT(*) FROM Book_Genres WHERE id=%s", (gid,))
    assert cur.fetchone()[0] == 0

def test_delete_user_by_id(conn):
    cur = conn.cursor()
    cur.execute("INSERT INTO Users (location,age) VALUES (%s,%s) RETURNING users_id", ("DU", 25))
    uid = cur.fetchone()[0]
    conn.commit()
    cur.execute("DELETE FROM Users WHERE users_id=%s", (uid,))
    conn.commit()
    cur.execute("SELECT COUNT(*) FROM Users WHERE users_id=%s", (uid,))
    assert cur.fetchone()[0] == 0

def test_delete_books_with_few_ratings_group_by(conn):
    cur = conn.cursor()
    pub_id = random_code()
    auth_id = random_code()
    isbn = random_isbn()
    cur.execute("INSERT INTO Publishers (publisher_id, name,address,country,email,phone) VALUES (%s,%s,%s,%s,%s,%s)",
                (pub_id, "DP", "A", "PL", "dp@mail", "000000"))
    cur.execute("INSERT INTO Authors (author_id, author_name,country_of_origin,birth_date) VALUES (%s,%s,%s,%s)",
                (auth_id, "DA", "US", "1970-01-01"))
    cur.execute("INSERT INTO Book_Genres (genre_name,popularity) VALUES (%s,%s) RETURNING id", ("DG", 1))
    gid = cur.fetchone()[0]
    cur.execute("INSERT INTO Books (isbn,book_name,year_of_release,genre_id,publisher_id,author_id) VALUES (%s,%s,%s,%s,%s,%s)",
                (isbn, "DelBook", 2024, gid, pub_id, auth_id))
    cur.execute("INSERT INTO Users (location,age) VALUES (%s,%s) RETURNING users_id", ("DelLoc", 33))
    uid = cur.fetchone()[0]
    cur.execute("INSERT INTO Book_Ratings (user_id,isbn,book_rating) VALUES (%s,%s,%s)", (uid, isbn, 5))
    conn.commit()
    cur.execute("""
        DELETE FROM Books
        WHERE isbn IN (
            SELECT isbn FROM Book_Ratings GROUP BY isbn HAVING COUNT(*) < 2
        )
    """)
    conn.commit()
    cur.execute("SELECT COUNT(*) FROM Books WHERE isbn=%s", (isbn,))
    assert cur.fetchone()[0] == 0

def test_delete_orders_with_user_join(conn):
    cur = conn.cursor()
    cur.execute("INSERT INTO Users (location,age) VALUES (%s,%s) RETURNING users_id", ("DelJoinLoc", 45))
    uid = cur.fetchone()[0]
    pub_id = random_code()
    auth_id = random_code()
    isbn = random_isbn()
    cur.execute("INSERT INTO Publishers (publisher_id, name,address,country,email,phone) VALUES (%s,%s,%s,%s,%s,%s)",
                (pub_id, "DPJ", "A", "PL", "dpj@mail", "000000"))
    cur.execute("INSERT INTO Authors (author_id, author_name,country_of_origin,birth_date) VALUES (%s,%s,%s,%s)",
                (auth_id, "DAJ", "US", "1970-01-01"))
    cur.execute("INSERT INTO Book_Genres (genre_name,popularity) VALUES (%s,%s) RETURNING id", ("DGJ", 1))
    gid = cur.fetchone()[0]
    cur.execute("INSERT INTO Books (isbn,book_name,year_of_release,genre_id,publisher_id,author_id) VALUES (%s,%s,%s,%s,%s,%s)",
                (isbn, "DelJoinBook", 2024, gid, pub_id, auth_id))
    cur.execute("INSERT INTO Orders (isbn,user_id,order_date,order_cost) VALUES (%s,%s,CURRENT_DATE,%s)",
                (isbn, uid, 66.6))
    conn.commit()
    cur.execute("""
        DELETE FROM Orders 
        USING Users u 
        WHERE Orders.user_id = u.users_id AND u.location = %s
    """, ("DelJoinLoc",))
    conn.commit()
    cur.execute("SELECT COUNT(*) FROM Orders WHERE user_id=%s", (uid,))
    assert cur.fetchone()[0] == 0

# -----------------------
# TEST START
# -----------------------

def postgres_tests():
    conn = psycopg2.connect(
        host="localhost",
        user="postgres",
        password="my-secret-pw",
        database="ZTB_DATABASE"
    )
    conn.autocommit = False

    tests = [
        test_insert_book_genre,
        test_insert_user,
        test_insert_publisher_and_author,
        test_insert_order_and_return,
        test_insert_book_rating_group_by,
        test_insert_book_rating_join,
        test_get_order_with_book_and_author,
        test_get_average_book_rating_above,
        test_get_genre_book_counts_group_by,
        test_get_users_and_orders_join,
        test_update_genre_popularity,
        test_update_user_location,
        test_update_genre_popularity_group_by,
        test_update_user_with_order_join,
        test_delete_genre_by_id,
        test_delete_user_by_id,
        test_delete_books_with_few_ratings_group_by,
        test_delete_orders_with_user_join,
    ]

    print(f"Znaleziono {len(tests)} testów PostgreSQL w {__file__!r}")
    total_start = time.time()
    for test in tests:
        start = time.time()
        try:
            test(conn)
            status = "OK"
        except AssertionError as e:
            status = f"FAIL ({e})"
        except Exception as e:
            status = f"ERROR ({e.__class__.__name__})"
        duration = time.time() - start
        print(f"{test.__name__:30} → {status:10} {duration:.4f}s")
    total_duration = time.time() - total_start
    print(f"\nCałkowity czas testów: {total_duration:.4f}s")
    conn.close()